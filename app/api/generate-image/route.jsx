import { storage } from "@/configs/FirebaseConfig";
import axios from "axios";
import { getDownloadURL, ref, uploadString } from "firebase/storage";
import { NextResponse } from "next/server";
import Replicate from "replicate";

export async function POST(req) {
  try {
    const { prompt } = await req.json();

    if (!process.env.REPLICATE_API_TOKEN) {
      throw new Error("Missing Replicate API token in environment variables");
    }

    const replicate = new Replicate({
      auth: process.env.REPLICATE_API_TOKEN,
    });

    const input = {
      prompt,
      height: 1280,
      width: 1024,
      num_outputs: 1,
    };

    const output = await replicate.run(
      "bytedance/sdxl-lightning-4step:5599ed30703defd1d160a25a63321b4dec97101d98b4674bcc56e41f62f35637",
      { input }
    );

    if (!output || !Array.isArray(output) || !output[0]) {
      throw new Error("No image generated by Replicate");
    }

    const base64Data = await ConvertImage(output[0]);
    if (!base64Data) {
      throw new Error("Failed to convert image to base64");
    }

    const base64Image = "data:image/png;base64," + base64Data;
    const fileName = "ai-short-video-files/" + Date.now() + ".png";
    const storageRef = ref(storage, fileName);

    await uploadString(storageRef, base64Image, "data_url");
    const downloadUrl = await getDownloadURL(storageRef);

    console.log("Image uploaded to:", downloadUrl);
    return NextResponse.json({ result: downloadUrl });
  } catch (e) {
    console.error("Image generation error:", e);
    return NextResponse.json(
      { error: "Failed to generate image", details: e?.message || e.toString() },
      { status: 500 }
    );
  }
}

const ConvertImage = async (imageUrl) => {
  try {
    const resp = await axios.get(imageUrl, { responseType: "arraybuffer" });
    return Buffer.from(resp.data).toString("base64");
  } catch (e) {
    console.error("ConvertImage error:", e);
    return null;
  }
};
