import { NextResponse } from "next/server";
import Replicate from "replicate";
import axios from "axios";
import cloudinary from "@/configs/CloudinaryConfig";

export async function POST(req) {
  try {
    const { prompt } = await req.json();

    if (!process.env.REPLICATE_API_TOKEN) {
      throw new Error("Missing Replicate API token in environment variables");
    }

    const replicate = new Replicate({
      auth: process.env.REPLICATE_API_TOKEN,
    });

    const input = {
      prompt,
      height: 1280,
      width: 1024,
      num_outputs: 1,
    };

    const output = await replicate.run(
      "bytedance/sdxl-lightning-4step:5599ed30703defd1d160a25a63321b4dec97101d98b4674bcc56e41f62f35637",
      { input }
    );

    if (!output || !Array.isArray(output) || !output[0]) {
      throw new Error("No image generated by Replicate");
    }

    const imageUrl = output[0];

    const response = await axios.get(imageUrl, { responseType: "arraybuffer" });

    const uploadedImage = await new Promise((resolve, reject) => {
      cloudinary.uploader
        .upload_stream(
          {
            folder: "ai-short-video-files",
            public_id: `img-${Date.now()}`,
            resource_type: "image",
          },
          (error, result) => {
            if (error) reject(error);
            else resolve(result);
          }
        )
        .end(response.data);
    });

    return NextResponse.json({ result: uploadedImage.secure_url });
  } catch (e) {
    console.error("Image generation error:", e);
    return NextResponse.json(
      {
        error: "Failed to generate image",
        details: e?.message || e.toString(),
      },
      { status: 500 }
    );
  }
}
